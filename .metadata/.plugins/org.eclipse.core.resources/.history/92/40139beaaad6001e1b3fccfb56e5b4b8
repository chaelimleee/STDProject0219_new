package com.javateam.memberProject.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

import com.zaxxer.hikari.HikariDataSource;

@Configuration
public class MyBatisConfig {

	@Bean(name="dataSource")//DataSource는 존재하는 connection 객체를 pool에서 꺼내 반환해준다.//connection pool을 관리하는 역할을 하는 객체
    @Primary
    @ConfigurationProperties(prefix="spring.datasource.hikari") 
    public DataSource hikariDataSource() {
        return DataSourceBuilder.create()
        			.type(HikariDataSource.class)
        			.build();
    }
	
	//SqlSessionFactory
	//어플리케이션이 시작할 때 딱 한 번만 생성된다.
	//MyBatis 프레임워크와 관련된 클래스로 SqlSession 인스턴스를 만드는데 사용된다.
	
	//SqlSession 
	//SqlSessionFactory 빈에 의해 생성되어지는 객체
	//SQL 문을 실행하고 결과(select 연산결과 등)를 Java 객체에 매핑하기 위한 기본 API를 제공
	//insert, update, delete, select을 포함하는 SQL 문을 실행하는 방법을 제공하며 트랜잭션 관리 및 리소스 정리도 제공
	// 실행흐름상 컨넥션 풀에있는 컨넥션 객체를 이용해서 SQL문을 실행하고 그 결과를 Java객체에 매핑시켜주기도 하는 존재
	
	// @Bean(name="myBatisHikariCP")
	@Bean(name="hikariCP")
	public SqlSessionFactory sqlSessionFactory() throws Exception {
	    SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
	    factoryBean.setDataSource(hikariDataSource());
	    
	    factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver()
				   .getResources("classpath:/mapper/*.xml"));
	    
//	    Properties props = new Properties();
//	    props.setProperty("mapUnderscoreToCamelCase", "true");
//	    factoryBean.setConfigurationProperties(props);
	    
	    return factoryBean.getObject();
	}
	
	@Bean(name="sqlSession")	
	public SqlSessionTemplate sqlSessionTemplate() throws Exception {
		
		return new SqlSessionTemplate(sqlSessionFactory());
	}
	
	//TransactionManager
	//트랜잭션을 시작, 커밋 및 롤백하기 위한 간단한 API를 제공
	//필요에 따라 변경사항을 commit 하거나, rollback하여 트랜잭션을 관리
	
	@Bean
    public PlatformTransactionManager getTransactionManager() {
	        
		return new DataSourceTransactionManager(this.hikariDataSource());
	}

}